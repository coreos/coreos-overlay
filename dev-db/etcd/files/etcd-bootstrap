#!/bin/bash

# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_ip IP_ADDRESS; then echo good; else echo bad; fi
# http://www.linuxjournal.com/content/validating-ip-address-bash-script
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}


# this is the function that waits for networking to come up
# will timeout after 30s and fail
/usr/bin/timeout 30 /usr/bin/coreos-api-wait
if [ $? -ne 0 ]; then
	echo could not reach API via coreos-api-wait
	exit 1
fi

/usr/bin/coreos-c10n

BOOTSTRAP="/var/run/etcd/bootstrap.config"
MY_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`
for HOSTS in `[ -e $BOOTSTRAP ] && cat $BOOTSTRAP`; do
        for IP in `echo $HOSTS | sed 's/,/\'$'\n/g' `; do
                LEADER=`curl --connect-timeout 1 -s $IP:7001/leader`
                if [ $? -eq 0 ]; then
                        LEADER_IP=`echo $LEADER | cut -d':' -f1`
                        LEADER_PORT=`echo $LEADER | cut -d':' -f2`
                        if valid_ip $LEADER_IP; then
                                echo GOT LEADER $LEADER
                                exec /usr/bin/etcd -i -v -a "$MY_IP" -C $LEADER
                        fi
                fi
        done
done
echo "Not able to connect to a leader, just starting..."
exec /usr/bin/etcd -i -v -a "$MY_IP"

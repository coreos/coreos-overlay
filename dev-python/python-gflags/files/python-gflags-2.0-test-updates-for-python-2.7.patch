From 8cd3b4270459124a25a96d7bc1b2924669f89fce Mon Sep 17 00:00:00 2001
From: "jwilliams@endpoint.com"
 <jwilliams@endpoint.com@844fb29a-f99b-11de-8173-5df4dc7aba59>
Date: Tue, 21 Feb 2012 22:17:32 +0000
Subject: [PATCH 1/3] Unit test updates for Python 2.7 compatibility

* Add "msg" parameter to our versions of the test functions
* Change regex to match the updated 2.7 float() ValueError response


git-svn-id: http://python-gflags.googlecode.com/svn/trunk@41 844fb29a-f99b-11de-8173-5df4dc7aba59
---
 tests/gflags_googletest.py | 12 ++++++------
 tests/gflags_unittest.py   |  4 ++--
 2 files changed, 8 insertions(+), 8 deletions(-)

diff --git a/tests/gflags_googletest.py b/tests/gflags_googletest.py
index 9ae614c..e725de6 100644
--- a/tests/gflags_googletest.py
+++ b/tests/gflags_googletest.py
@@ -88,22 +88,22 @@ def MultiLineEqual(expected, actual):
 
 
 class TestCase(unittest.TestCase):
-  def assertListEqual(self, list1, list2):
+  def assertListEqual(self, list1, list2, msg=None):
     """Asserts that, when sorted, list1 and list2 are identical."""
     # This exists in python 2.7, but not previous versions.  Use the
     # built-in version if possible.
     if hasattr(unittest.TestCase, "assertListEqual"):
-      unittest.TestCase.assertListEqual(self, Sorted(list1), Sorted(list2))
+      unittest.TestCase.assertListEqual(self, Sorted(list1), Sorted(list2), msg)
     else:
-      self.assertEqual(Sorted(list1), Sorted(list2))
+      self.assertEqual(Sorted(list1), Sorted(list2), msg)
 
-  def assertMultiLineEqual(self, expected, actual):
+  def assertMultiLineEqual(self, expected, actual, msg=None):
     # This exists in python 2.7, but not previous versions.  Use the
     # built-in version if possible.
     if hasattr(unittest.TestCase, "assertMultiLineEqual"):
-      unittest.TestCase.assertMultiLineEqual(self, expected, actual)
+      unittest.TestCase.assertMultiLineEqual(self, expected, actual, msg)
     else:
-      self.assertTrue(MultiLineEqual(expected, actual))
+      self.assertTrue(MultiLineEqual(expected, actual), msg)
 
   def assertRaisesWithRegexpMatch(self, exception, regexp, fn, *args, **kwargs):
     try:
diff --git a/tests/gflags_unittest.py b/tests/gflags_unittest.py
index 8e948bf..091ebd9 100755
--- a/tests/gflags_unittest.py
+++ b/tests/gflags_unittest.py
@@ -814,7 +814,7 @@ class MultiNumericalFlagsTest(googletest.TestCase):
 
     self.assertRaisesWithRegexpMatch(
         gflags.IllegalFlagValue,
-        'flag --m_float2=abc: invalid literal for float\(\): abc',
+        'flag --m_float2=abc: (invalid literal for float\(\)||could not convert string to float): abc',
         gflags.DEFINE_multi_float, 'm_float2', ['abc'], 'desc')
 
     # Test non-parseable command line values.
@@ -831,7 +831,7 @@ class MultiNumericalFlagsTest(googletest.TestCase):
     argv = ('./program', '--m_float2=def')
     self.assertRaisesWithRegexpMatch(
         gflags.IllegalFlagValue,
-        'flag --m_float2=def: invalid literal for float\(\): def',
+        'flag --m_float2=def: (invalid literal for float\(\)||could not convert string to float): def',
         FLAGS, argv)
 
 
-- 
1.8.1.5

